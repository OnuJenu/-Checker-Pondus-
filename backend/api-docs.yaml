
openapi: 3.0.0
info:
  title: Mobile Voting Platform Backend API
  version: 1.0.0
  description: A RESTful API for a mobile voting platform where users can create and participate in polls with two options, supporting text, video, audio, or image formats.

servers:
  - url: http://localhost:5000/api/v1
    description: Local server

paths:
  /auth/login:
    post:
      summary: Authenticate user with username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
        '401':
          description: Invalid credentials

  /auth/google/auth:
    get:
      summary: Redirect to Google OAuth
      responses:
        '200':
          description: Redirect initiated

  /auth/google/callback:
    get:
      summary: Handle Google OAuth callback
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string

  /auth/twitter/auth:
    get:
      summary: Redirect to Twitter OAuth
      responses:
        '200':
          description: Redirect initiated

  /auth/twitter/callback:
    get:
      summary: Handle Twitter OAuth callback
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string

  /auth/facebook/auth:
    get:
      summary: Redirect to Facebook OAuth
      responses:
        '200':
          description: Redirect initiated

  /auth/facebook/callback:
    get:
      summary: Handle Facebook OAuth callback
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string

  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: securepassword123
      responses:
        '201':
          description: User created successfully
        '400':
          description: Username or email already exists

  /polls:
    get:
      summary: Get a paginated list of polls
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: filter
          schema:
            type: string
            enum: [all, active, closed]
            default: all
          description: Filter polls by status
      responses:
        '200':
          description: A paginated list of polls
          content:
            application/json:
              schema:
                type: object
                properties:
                  polls:
                    type: array
                    items:
                      $ref: '#/components/schemas/Poll'
                  total_pages:
                    type: integer
                  current_page:
                    type: integer

    post:
      summary: Create a new poll with media options
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  example: "Which color dress is better?"
                option1:
                  type: object
                  properties:
                    media_type:
                      type: string
                      enum: [text, image, video, audio]
                    media_url:
                      type: string
                    description:
                      type: string
                option2:
                  type: object
                  properties:
                    media_type:
                      type: string
                      enum: [text, image, video, audio]
                    media_url:
                      type: string
                    description:
                      type: string
      responses:
        '201':
          description: Poll created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  poll_id:
                    type: integer
        '400':
          description: Invalid request data
        '500':
          description: Internal server error

  /polls/{poll_id}/vote:
    post:
      summary: Vote on a poll
      parameters:
        - in: path
          name: poll_id
          required: true
          schema:
            type: integer
            example: 123
          description: ID of the poll to vote on.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                option_id:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Vote recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  poll_id:
                    type: integer
                  option_id:
                    type: integer
        '400':
          description: Invalid vote or poll not found
        '500':
          description: Internal server error

  /polls/{poll_id}/results:
    get:
      summary: Get results of a closed poll
      parameters:
        - in: path
          name: poll_id
          required: true
          schema:
            type: integer
            example: 123
          description: ID of the poll to get results for
      responses:
        '200':
          description: Poll results
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  question:
                    type: string
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        text:
                          type: string
                        vote_count:
                          type: integer
                        percentage:
                          type: number
                  total_votes:
                    type: integer
        '403':
          description: Poll is not closed
        '404':
          description: Poll not found

  /polls/{poll_id}/close:
    put:
      summary: Close a poll
      parameters:
        - in: path
          name: poll_id
          required: true
          schema:
            type: integer
            example: 123
          description: ID of the poll to close
      responses:
        '200':
          description: Poll closed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: User is not authorized to close this poll
        '404':
          description: Poll not found
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
    Poll:
      type: object
      properties:
        id:
          type: integer
        question:
          type: string
        options:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              media_type:
                type: string
                enum: [text, image, video, audio]
              media_url:
                type: string
              description:
                type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        user_id:
          type: integer
